#include <iostream>
#include <string>
using namespace std;

int main()
{
    int n, op = 0;
    string s;
    cin >> n;
    cin >> s;

    // 遍历字符串
    for (int i = 0; i < n - 1; ++i)
    {
        // 如果相邻的两个字符相同，则需要一次操作
        if (s[i] == s[i + 1])
        {
            op++; // 统计操作次数
            // 虽然我们不需要真正右移字符，但我们假设右移后字符变成一个不同的字符。
            // 为了避免连续相同，我们跳过下一个字符的相同判断
            if (i + 2 < n && s[i + 1] == s[i + 2])
                s[i + 1] = (s[i + 1] - 'a' + 1) % 26 + 'a'; // 临时右移避免下一个冲突
        }
    }
    cout << op << endl;
    system("pause");
    return 0;
}

/*
一个长度为n的字符串S，可以执行以下的操作：选择一个索引i(1≤i≤n)，并将Si按照字母表上的顺序、循环右移一位。例如：'α'右移一位为'b'，'z'右移一位为'a'。
字符串S任意两个相邻的字符都不一致的最小操作次数为多少
输入描述:
第一行输入-个整数n(2≤n≤10^5）代表字符串的长度。
第二行输入一个长度为n，且只包含小写字母的字符串S
输出描述:
在一行上输出一个整数，代表使得任意两个相邻的字符都不一致的最小操作次数。

示例1:
输入:
3
aaa
输出:1
说明: 只需要将第二个'a'右移一位即可。
示例2:
输入:
2
ab
输出:0
*/